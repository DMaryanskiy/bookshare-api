definitions:
  books.BookInput:
    properties:
      author:
        type: string
      description:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  models.Book:
    properties:
      author:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isVerified:
        type: boolean
      passwordHash:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  user.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  user.RegisterUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
paths:
  /admin/users:
    get:
      description: Retrieves a list of all users ordered by creation date descending
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Could not retrieve users
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all users
      tags:
      - admin
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revokes the refresh token and logs the user out
      parameters:
      - description: Refresh token to revoke
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/user.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Refresh token required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Validates refresh token and returns a new access and refresh token
      parameters:
      - description: Refresh token to validate
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/user.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Missing refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error creating or deleting tokens
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user and sends a verification email
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verifies a user's email using the token and UID
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      - description: User ID
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Verification failed due to server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify user email
      tags:
      - auth
  /books:
    get:
      description: Returns a list of all books owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: Could not fetch books
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Creates a new book record for the authenticated user
      parameters:
      - description: Book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/books.BookInput'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create book
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Deletes a book owned by the authenticated user
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete book
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a book
      tags:
      - books
    get:
      description: Retrieves a specific book owned by the authenticated user
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book retrieved successfully
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Book not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Updates the details of a book owned by the authenticated user
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/books.BookInput'
      produces:
      - application/json
      responses:
        "200":
          description: Updated book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Book not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update book
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a book
      tags:
      - books
  /users/me:
    get:
      description: Returns the authenticated user's details
      produces:
      - application/json
      responses:
        "200":
          description: User info
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: User ID missing from context
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get current user
      tags:
      - user
swagger: "2.0"
